package oop.kurs2.gui;

import com.google.gson.Gson;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import oop.kurs2.Game;
import oop.kurs2.services.BattleService;
import oop.kurs2.services.GameService;
import oop.kurs2.services.GenerateService;
import oop.kurs2.services.SerializeService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class MainFrame extends JFrame {
    private JPanel rootPanel;
    private ShipsDrawPanel shipsDrawPanel;
    private JButton nextStepButton;
    private JPanel graphicsPanel;
    private JSpinner fieldSizeSpinner;
    private JButton createFields;
    private JTextField firstPlayerName;
    private JTextField secondPlayerName;
    private JPanel settingsContainer;
    private JTextField textField;
    private JButton serialize;
    private JButton deserialize;

    public MainFrame() {
        $$$setupUI$$$();
        setContentPane(rootPanel);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        createFields.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Game game = new Game(
                        GenerateService.generateBattlefield((int) fieldSizeSpinner.getValue(), (int) fieldSizeSpinner.getValue(), firstPlayerName.getText()),
                        GenerateService.generateBattlefield((int) fieldSizeSpinner.getValue(), (int) fieldSizeSpinner.getValue(), secondPlayerName.getText())
                );
                shipsDrawPanel.setGame(game);
                shipsDrawPanel.setFirstPlayerName(game.getAttacker().getPlayerName());
                shipsDrawPanel.setSecondPlayerName(game.getAttacked().getPlayerName());
                shipsDrawPanel.repaint();
            }
        });
        nextStepButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (BattleService.hasNextMove(shipsDrawPanel.getGame().getAttacker(), shipsDrawPanel.getGame().getAttacked()))
                    shipsDrawPanel.setGame(GameService.nextStep(shipsDrawPanel.getGame()));
                else
                    textField.setText(BattleService.checkDefeat(shipsDrawPanel.getGame().getAttacked()) ? shipsDrawPanel.getGame().getAttacker().getPlayerName() : shipsDrawPanel.getGame().getAttacked().getPlayerName() + " wins!");
                shipsDrawPanel.repaint();
                System.out.println(shipsDrawPanel.getGame().getAttacked().getRemainingCells().size());
            }
        });
        serialize.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                SerializeService<Game> serialize = new SerializeService<>();
                String serialization = serialize.serialize(shipsDrawPanel.getGame());
                try (FileWriter fw = new FileWriter("./src/main/java/save/save.txt")) {
                    fw.write(serialization);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });
        deserialize.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try (FileReader fr = new FileReader("./src/main/java/save/save.txt")) {
                    Scanner scn = new Scanner(fr);
                    StringBuilder sb = new StringBuilder();
                    while (scn.hasNextLine())
                        sb.append(scn.nextLine());
                    Game game = new Gson().fromJson(String.valueOf(sb), Game.class);
                    shipsDrawPanel.setGame(game);
                    shipsDrawPanel.setFirstPlayerName(game.getAttacker().getPlayerName());
                    shipsDrawPanel.setSecondPlayerName(game.getAttacked().getPlayerName());
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                shipsDrawPanel.repaint();
            }
        });
    }

    private void createUIComponents() {
        shipsDrawPanel = new ShipsDrawPanel(800, 800);
        shipsDrawPanel.setFirstPlayerName(shipsDrawPanel.getGame().getAttacker().getPlayerName());
        shipsDrawPanel.setSecondPlayerName(shipsDrawPanel.getGame().getAttacked().getPlayerName());
        SpinnerNumberModel snm = new SpinnerNumberModel(10, 1, 50, 1);
        fieldSizeSpinner = new JSpinner(snm);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        graphicsPanel = new JPanel();
        graphicsPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(graphicsPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(900, 400), new Dimension(771, 400), new Dimension(900, 400), 0, false));
        graphicsPanel.add(shipsDrawPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(900, 400), new Dimension(764, 10), new Dimension(900, 400), 0, false));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(1, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        settingsContainer = new JPanel();
        settingsContainer.setLayout(new GridLayoutManager(7, 3, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(settingsContainer, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        settingsContainer.add(fieldSizeSpinner, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Field Size");
        settingsContainer.add(label1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        firstPlayerName = new JTextField();
        firstPlayerName.setText("Set First Player Name");
        settingsContainer.add(firstPlayerName, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        secondPlayerName = new JTextField();
        secondPlayerName.setText("Set Second Player Name");
        settingsContainer.add(secondPlayerName, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        createFields = new JButton();
        createFields.setText("Create");
        settingsContainer.add(createFields, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(78, 23), null, 0, false));
        final Spacer spacer2 = new Spacer();
        settingsContainer.add(spacer2, new GridConstraints(0, 0, 7, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        textField = new JTextField();
        settingsContainer.add(textField, new GridConstraints(4, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        serialize = new JButton();
        serialize.setText("Serialize");
        settingsContainer.add(serialize, new GridConstraints(5, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deserialize = new JButton();
        deserialize.setText("Deserialize");
        settingsContainer.add(deserialize, new GridConstraints(6, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        rootPanel.add(spacer3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(771, 14), null, 0, false));
        nextStepButton = new JButton();
        nextStepButton.setText("Next Step");
        rootPanel.add(nextStepButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(771, 30), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
